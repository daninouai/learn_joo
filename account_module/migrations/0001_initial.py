# Generated by Django 4.1.6 on 2024-05-07 19:11

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('latin_name', models.CharField(max_length=300, verbose_name='نام لاتین')),
                ('latin_family_name', models.CharField(max_length=300, verbose_name='نام خانوادگی لاتین')),
                ('father_name', models.CharField(max_length=300, verbose_name='نام پدر')),
                ('national_code', models.SmallIntegerField(null=True, unique=True, verbose_name='کد ملی')),
                ('certificate_number', models.SmallIntegerField(null=True, unique=True, verbose_name='شماره شناسنامه')),
                ('birth_date', models.DateField(null=True, verbose_name='تاریخ تولد')),
                ('image', models.ImageField(null=True, upload_to='images/user_images', verbose_name='تصویر کاربر')),
                ('marital_status', models.CharField(choices=[('مجرد', 'مجرد'), ('متاهل', 'متاهل')], max_length=200, null=True, verbose_name='تاهل')),
                ('gender', models.CharField(choices=[('مرد', 'مرد'), ('زن', 'زن')], max_length=200, null=True, verbose_name='جنسیت')),
                ('religion', models.CharField(choices=[('مسلمان شیعه', 'مسلمان شیعه'), ('مسلمان سنی', 'مسلمان سنی'), ('مسیحی', 'مسیحی')], max_length=200, null=True, verbose_name='دین')),
                ('is_native', models.BooleanField(default=False, null=True, verbose_name='بومی / غیر بومی')),
                ('place_of_issue', models.CharField(max_length=300, null=True, verbose_name='محل صدور')),
                ('military_service_status', models.CharField(choices=[('معاف', 'معاف'), ('معافیت تحصیلی', 'معافیت تحصیلی'), ('خدمت کرده', 'خدمت کرده')], max_length=200, null=True, verbose_name='وضعیت خدمت')),
                ('phone_number', models.CharField(max_length=300, null=True, verbose_name='شماره تلفن')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
